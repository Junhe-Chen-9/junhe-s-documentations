"use strict";(self.webpackChunkjunhe_s_documents=self.webpackChunkjunhe_s_documents||[]).push([[7588],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(t),h=a,g=d["".concat(c,".").concat(h)]||d[h]||p[h]||o;return t?r.createElement(g,i(i({ref:n},u),{},{components:t})):r.createElement(g,i({ref:n},u))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=h;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[d]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}h.displayName="MDXCreateElement"},5384:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=t(7462),a=(t(7294),t(3905));const o={slug:"Leetcode 1491",title:"Leetcode 1491",authors:["junhechen"],tags:["leetcode","dailychallenge","notes"]},i=void 0,l={permalink:"/blog/Leetcode 1491",editUrl:"https://github.com/Junhe-Chen-9/junhe-s-documentations/blob/main/blog/2023-04-30-Leet Code.md",source:"@site/blog/2023-04-30-Leet Code.md",title:"Leetcode 1491",description:"Since today's questions are too easy, we just put down the res for both weekly challange and daily challange.",date:"2023-04-30T00:00:00.000Z",formattedDate:"April 30, 2023",tags:[{label:"leetcode",permalink:"/blog/tags/leetcode"},{label:"dailychallenge",permalink:"/blog/tags/dailychallenge"},{label:"notes",permalink:"/blog/tags/notes"}],readingTime:1.775,hasTruncateMarker:!1,authors:[{name:"Junhe Chen",title:"Software Developer",url:"https://bio.junhechen.com",imageURL:"https://bio.junhechen.com/assets/IMG_0001.jpeg",key:"junhechen"}],frontMatter:{slug:"Leetcode 1491",title:"Leetcode 1491",authors:["junhechen"],tags:["leetcode","dailychallenge","notes"]},nextItem:{title:"Leetcode 1579",permalink:"/blog/Leetcode 1579"}},c={authorsImageUrls:[void 0]},s=[{value:"1419",id:"1419",level:2},{value:"1065",id:"1065",level:2}],u={toc:s},d="wrapper";function p(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Since today's questions are too easy, we just put down the res for both weekly challange and daily challange."),(0,a.kt)("h2",{id:"1419"},"1419"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public double average(int[] salary) {\n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        int total = 0;\n        for(int n : salary){\n            min = Math.min(min,n);\n            max = Math.max(max,n);\n            total += n;\n        }\n        return (total - min - max) / (double)(salary.length - 2);\n    }\n}\n")),(0,a.kt)("h2",{id:"1065"},"1065"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// the native apporach\nclass Solution {\n    public int[][] indexPairs(String text, String[] words) {\n        ArrayList<int[]> res = new ArrayList<>();\n        Arrays.sort(words,(a,b) ->{return a.length() - b.length();}); // insure the order.\n        for(int i = 0; i < text.length(); i ++){\n            for(String word : words){\n                if(text.substring(i).startsWith(word)){\n                    res.add(new int[]{i,i + word.length() - 1});\n                }\n            }\n        }\n        int[][] ans = new int[res.size()][2];\n        for(int i = 0; i < res.size(); i ++){\n            ans[i] = res.get(i);\n        }\n        return ans;\n    }\n}\n")),(0,a.kt)("p",null,"Because trie can detect a shorter word along the way, this avoid the sorting which can take extra time. this is a better solution."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public class TrieNode{\n        boolean word;\n        TrieNode[] children;\n        public TrieNode(){\n            word = false;\n            children = new TrieNode[26]; //26 character\n        }\n    }\n    public class MyTrie{\n        TrieNode root;\n        public MyTrie(){\n            root = new TrieNode();\n        }\n        public void add(String word){\n            TrieNode curr = root;\n            for(char c : word.toCharArray()){\n                if(curr.children[c - 'a'] == null){\n                    curr.children[c - 'a'] = new TrieNode();\n                }\n                curr = curr.children[c - 'a'];\n            }\n            curr.word = true;\n        }\n        public boolean serach(String word){\n            TrieNode curr = root;\n            for(char c : word.toCharArray()){\n                if(curr.children[c - 'a'] == null) return false;\n                curr = curr.children[c - 'a'];\n            }\n            return curr.word;\n        }\n        \n    }\n    public int[][] indexPairs(String text, String[] words) {\n        MyTrie trie = new MyTrie();\n        for(String word : words){\n            trie.add(word);\n        }\n        List<int[]> res = new ArrayList<>();\n        for(int i = 0; i < text.length(); i ++){\n            TrieNode p = trie.root;\n            for (int j = i; j < text.length(); j++) {\n                if (p.children[text.charAt(j) - 'a'] == null) {\n                    break;\n                }\n                p = p.children[text.charAt(j) - 'a'];\n                if (p.word) {\n                    res.add(new int[] { i, j });\n                }\n            }\n        }\n        int[][] ans = new int[res.size()][];\n        ans = res.toArray(ans);\n        return ans;\n    }\n}\n")))}p.isMDXComponent=!0}}]);