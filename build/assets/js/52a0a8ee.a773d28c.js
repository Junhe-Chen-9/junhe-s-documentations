"use strict";(self.webpackChunkjunhe_s_documents=self.webpackChunkjunhe_s_documents||[]).push([[809],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),g=o,m=u["".concat(l,".").concat(g)]||u[g]||h[g]||i;return n?r.createElement(m,a(a({ref:t},p),{},{components:n})):r.createElement(m,a({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},1636:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const i={slug:"Leetcode 727",title:"Leetcode 727",authors:["junhechen"],tags:["leetcode","weeklychallenge","notes"]},a=void 0,s={permalink:"/blog/Leetcode 727",editUrl:"https://github.com/Junhe-Chen-9/junhe-s-documentations/blob/main/blog/2023-04-21-Leet Code Weekly Challenge.md",source:"@site/blog/2023-04-21-Leet Code Weekly Challenge.md",title:"Leetcode 727",description:"This question interesting because our dp is not finding the min of the length but it is finding the ending index of given starting point p1. This is a very new DP problem that I have first encountered.",date:"2023-04-21T00:00:00.000Z",formattedDate:"April 21, 2023",tags:[{label:"leetcode",permalink:"/blog/tags/leetcode"},{label:"weeklychallenge",permalink:"/blog/tags/weeklychallenge"},{label:"notes",permalink:"/blog/tags/notes"}],readingTime:1.2,hasTruncateMarker:!1,authors:[{name:"Junhe Chen",title:"Software Developer",url:"https://bio.junhechen.com",imageURL:"https://bio.junhechen.com/assets/IMG_0001.jpeg",key:"junhechen"}],frontMatter:{slug:"Leetcode 727",title:"Leetcode 727",authors:["junhechen"],tags:["leetcode","weeklychallenge","notes"]},prevItem:{title:"Leetcode 1416",permalink:"/blog/Leetcode 1416"},nextItem:{title:"Leetcode 1312",permalink:"/blog/Leetcode 1312"}},l={authorsImageUrls:[void 0]},c=[],p={toc:c},u="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This question interesting because our dp is not finding the min of the length but it is finding the ending index of given starting point p1. This is a very new DP problem that I have first encountered. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'class Solution {\n    Integer[][] memo;\n    int min = Integer.MAX_VALUE;\n    int start = -1;\n    public String minWindow(String s1, String s2) {\n        memo = new Integer[s1.length()][s2.length() + 1];\n        dp(s1,s2,0,0);\n        return start == -1 ? "" : s1.substring(start,start + min);\n    }\n    private int dp(String s1, String s2, int p1, int p2){ \n        // we use dp method to find the ending index at given index of s1 \n\n        if(p2 == s2.length()) return p1; // we have all the character from p2\n        if(p1 == s1.length()) return Integer.MAX_VALUE; // we are not able to match \n        // solved case\n        if(memo[p1][p2] != null) return memo[p1][p2];\n        // solve the case \n        // starts with skip the character\n        int res = dp(s1,s2,p1 + 1, p2);\n        if(s1.charAt(p1) == s2.charAt(p2)){\n            // we have a match \n            res = Math.min(res,dp(s1,s2,p1 + 1, p2 + 1));\n        }\n        if(p2 == 0 && res < Integer.MAX_VALUE){\n            // this is a valid starting point \n            // note since we called skip first, that means we are always replacing the substring as we moving forward \n            // so res - p1 <= min is important here to locate the correct starting point\n            if(res - p1 <= min){\n                min = res - p1;\n                start = p1;\n            }\n        }\n        return memo[p1][p2] = res;\n    }\n    ```\n}\n')))}h.isMDXComponent=!0}}]);