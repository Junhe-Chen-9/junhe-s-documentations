"use strict";(self.webpackChunkjunhe_s_documents=self.webpackChunkjunhe_s_documents||[]).push([[7241],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=i.createContext({}),u=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=u(e.components);return i.createElement(s.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},b=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(t),b=r,g=p["".concat(s,".").concat(b)]||p[b]||d[b]||o;return t?i.createElement(g,a(a({ref:n},c),{},{components:t})):i.createElement(g,a({ref:n},c))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=b;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:r,a[1]=l;for(var u=2;u<o;u++)a[u]=t[u];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}b.displayName="MDXCreateElement"},1989:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var i=t(7462),r=(t(7294),t(3905));const o={slug:"Leetcode 1579",title:"Leetcode 1579",authors:["junhechen"],tags:["leetcode","dailychallenge","notes"]},a=void 0,l={permalink:"/blog/Leetcode 1579",editUrl:"https://github.com/Junhe-Chen-9/junhe-s-documentations/blob/main/blog/2023-04-29-Leet Code.md",source:"@site/blog/2023-04-29-Leet Code.md",title:"Leetcode 1579",description:"Still union find, it is easy to identify, but there is little twist, initially I thought of sorting the edges, so we can union type 3 first, but this takes n log n time because sorting is bound by that, if we traversal twice the edges, still we only take just n time, so it would actually beat the way I implemented at begining. other than this, this question uses two union find data structure but everthing should be just the same.",date:"2023-04-29T00:00:00.000Z",formattedDate:"April 29, 2023",tags:[{label:"leetcode",permalink:"/blog/tags/leetcode"},{label:"dailychallenge",permalink:"/blog/tags/dailychallenge"},{label:"notes",permalink:"/blog/tags/notes"}],readingTime:1.575,hasTruncateMarker:!1,authors:[{name:"Junhe Chen",title:"Software Developer",url:"https://bio.junhechen.com",imageURL:"https://bio.junhechen.com/assets/IMG_1960.jpg",key:"junhechen"}],frontMatter:{slug:"Leetcode 1579",title:"Leetcode 1579",authors:["junhechen"],tags:["leetcode","dailychallenge","notes"]},prevItem:{title:"Leetcode 1491",permalink:"/blog/Leetcode 1491"},nextItem:{title:"Leetcode 1697",permalink:"/blog/Leetcode 1697"}},s={authorsImageUrls:[void 0]},u=[],c={toc:u},p="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Still union find, it is easy to identify, but there is little twist, initially I thought of sorting the edges, so we can union type 3 first, but this takes n log n time because sorting is bound by that, if we traversal twice the edges, still we only take just n time, so it would actually beat the way I implemented at begining. other than this, this question uses two union find data structure but everthing should be just the same. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public int maxNumEdgesToRemove(int n, int[][] edges) {\n        // still union find\n        // we can remove edge if when we trying to connect the nodes are already connected\n        UnionFind alice = new UnionFind(n);\n        UnionFind bob = new UnionFind(n);\n        int res = 0;\n        // do union for type 3 first\n        for(int[] edge : edges){\n            if(edge[0] == 3){\n                int a = edge[1];\n                int b = edge[2];\n                res += (alice.union(a,b) | bob.union(a,b));\n            }\n        }\n\n        for(int[] edge : edges){\n            int type = edge[0];\n            int a = edge[1];\n            int b = edge[2];\n            if(type == 1){\n                res += alice.union(a,b);\n            }else if(type == 2){\n                res += bob.union(a,b);\n            }\n        }\n\n        if(alice.isValid() && bob.isValid()){\n            return edges.length - res;\n        }else{\n            return -1;\n        }\n    }\n    public class UnionFind {\n        int[] parent;\n        int[] size;\n        int n;\n        public UnionFind(int n){\n            parent = new int[n + 1];\n            size = new int[n + 1];\n            for(int i = 0; i <= n; i ++){\n                parent[i] = i;\n                size[i] = 1;\n            }\n            this.n = n;\n        }\n        public int find(int a){\n            if(parent[a] == a) return a;\n            return parent[a] = find(parent[a]);\n        }\n        public int union(int a, int b){\n            int pa = find(a);\n            int pb = find(b);\n            if(pa == pb) return 0;\n            if(size[pa] > size[pb]){\n                // join b into a \n                parent[pb] = a;\n                size[pa] += size[pb];\n            }else{\n                parent[pa] = b;\n                size[pb] += size[pa];\n            }\n            n --;\n            return 1;\n        }\n        public boolean isValid(){\n            return n == 1;\n        }\n    }\n}\n")))}d.isMDXComponent=!0}}]);