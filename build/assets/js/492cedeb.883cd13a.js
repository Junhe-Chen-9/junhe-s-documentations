"use strict";(self.webpackChunkjunhe_s_documents=self.webpackChunkjunhe_s_documents||[]).push([[4441],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),h=o,d=u["".concat(s,".").concat(h)]||u[h]||m[h]||a;return n?r.createElement(d,i(i({ref:t},p),{},{components:n})):r.createElement(d,i({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},4472:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={slug:"Leetcode 1312",title:"Leetcode 1312",authors:["junhechen"],tags:["leetcode","dailychallenge","notes"]},i=void 0,l={permalink:"/blog/Leetcode 1312",editUrl:"https://github.com/Junhe-Chen-9/junhe-s-documentations/blob/main/blog/2023-04-21-Leet Code/index.md",source:"@site/blog/2023-04-21-Leet Code/index.md",title:"Leetcode 1312",description:"This week we are been doing DP problems and this is one of them, it is quite easy to implement, but little tricky to find the entry point.",date:"2023-04-21T00:00:00.000Z",formattedDate:"April 21, 2023",tags:[{label:"leetcode",permalink:"/blog/tags/leetcode"},{label:"dailychallenge",permalink:"/blog/tags/dailychallenge"},{label:"notes",permalink:"/blog/tags/notes"}],readingTime:.915,hasTruncateMarker:!1,authors:[{name:"Junhe Chen",title:"Software Developer",url:"https://bio.junhechen.com",imageURL:"https://bio.junhechen.com/assets/IMG_0001.jpeg",key:"junhechen"}],frontMatter:{slug:"Leetcode 1312",title:"Leetcode 1312",authors:["junhechen"],tags:["leetcode","dailychallenge","notes"]},prevItem:{title:"Leetcode 727",permalink:"/blog/Leetcode 727"},nextItem:{title:"Welcome",permalink:"/blog/welcome"}},s={authorsImageUrls:[void 0]},c=[],p={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This week we are been doing DP problems and this is one of them, it is quite easy to implement, but little tricky to find the entry point."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    Integer[][] memo;\n    public int minInsertions(String s) {\n        // we can think this as in a different prespective \n        // what is longest we have to insert to make this a palindrome?\n        // that is correct we can insert s in reverse to complish that, \n        // if we take out the character we already have that means everthing else would then become palindrome \n        memo = new Integer[s.length()][s.length()];\n        StringBuilder sb = new StringBuilder(s);\n        \n        return s.length() - lcs(s,sb.reverse().toString(),0,0);\n    }\n    private int lcs(String s1, String s2, int p1, int p2){\n        // base case \n        // case if we used one of the string up \n        if(p1 == s1.length()) return 0;  \n        if(p2 == s2.length()) return 0; \n        // solved case\n        if(memo[p1][p2] != null) return memo[p1][p2];\n        // solve the case \n        \n        if(s1.charAt(p1) == s2.charAt(p2)){\n            // if we have a match \n            return memo[p1][p2] =  1 + lcs(s1,s2,p1 + 1,p2 + 1);\n        }\n        return memo[p1][p2] = Math.max(lcs(s1,s2,p1 + 1,p2),lcs(s1,s2,p1,p2 + 1));\n    }\n}\n")))}m.isMDXComponent=!0}}]);