"use strict";(self.webpackChunkjunhe_s_documents=self.webpackChunkjunhe_s_documents||[]).push([[3679],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(n),d=o,g=p["".concat(c,".").concat(d)]||p[d]||f[d]||i;return n?r.createElement(g,a(a({ref:t},u),{},{components:n})):r.createElement(g,a({ref:t},u))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:o,a[1]=l;for(var s=2;s<i;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},544:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>f,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(7462),o=(n(7294),n(3905));const i={slug:"Leetcode 59",title:"Leetcode 59",authors:["junhechen"],tags:["leetcode","dailychallenge","notes"]},a=void 0,l={permalink:"/blog/Leetcode 59",editUrl:"https://github.com/Junhe-Chen-9/junhe-s-documentations/blob/main/blog/2023-05-09-Leet Code.md",source:"@site/blog/2023-05-09-Leet Code.md",title:"Leetcode 59",description:"very similar question , just inserting into the matrix instead of traversaling it.",date:"2023-05-09T00:00:00.000Z",formattedDate:"May 9, 2023",tags:[{label:"leetcode",permalink:"/blog/tags/leetcode"},{label:"dailychallenge",permalink:"/blog/tags/dailychallenge"},{label:"notes",permalink:"/blog/tags/notes"}],readingTime:1.015,hasTruncateMarker:!1,authors:[{name:"Junhe Chen",title:"Software Developer",url:"https://bio.junhechen.com",imageURL:"https://bio.junhechen.com/assets/IMG_0001.jpeg",key:"junhechen"}],frontMatter:{slug:"Leetcode 59",title:"Leetcode 59",authors:["junhechen"],tags:["leetcode","dailychallenge","notes"]},prevItem:{title:"Leetcode 1035",permalink:"/blog/Leetcode 1035"},nextItem:{title:"Leetcode 54",permalink:"/blog/Leetcode 54"}},c={authorsImageUrls:[void 0]},s=[],u={toc:s},p="wrapper";function f(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"very similar question , just inserting into the matrix instead of traversaling it."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public int[][] generateMatrix(int n) {\n        int[][] res = new int[n][n];\n        // define the boundry \n        int up = 0;\n        int down = n - 1;\n        int left = 0;\n        int right = n - 1;\n        int curr = 1; // we starting inserting one \n        while(curr <= n * n){\n            // we have more stuff to insert\n            // first we want to insert from left to right\n            for(int i = left; i <= right; i ++){\n                res[up][i] = curr ++;\n            }\n            // now we want to insert downwards \n            for(int j = up + 1; j <= down; j ++){\n                res[j][right] = curr;\n                curr ++;\n            }\n            // now if we are not on the same row we would wanna go cross left \n            if(up != down){\n                for(int i = right - 1; i >= left; i --){\n                    res[down][i] = curr++;\n                }\n            }\n            // now finally we want to go down to up \n            if(left != right){\n                for(int j = down - 1; j > up; j --){\n                    res[j][left] = curr ++;\n                }\n            }\n            // shrink the boundry \n            left ++;\n            right --;\n            up ++;\n            down --;\n        }\n        return res;\n    }\n    \n}\n")))}f.isMDXComponent=!0}}]);