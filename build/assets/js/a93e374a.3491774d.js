"use strict";(self.webpackChunkjunhe_s_documents=self.webpackChunkjunhe_s_documents||[]).push([[9509],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=i.createContext({}),u=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=u(e.components);return i.createElement(l.Provider,{value:n},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},h=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=u(t),h=r,m=c["".concat(l,".").concat(h)]||c[h]||p[h]||a;return t?i.createElement(m,o(o({ref:n},d),{},{components:t})):i.createElement(m,o({ref:n},d))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=h;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[c]="string"==typeof e?e:r,o[1]=s;for(var u=2;u<a;u++)o[u]=t[u];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}h.displayName="MDXCreateElement"},7074:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var i=t(7462),r=(t(7294),t(3905));const a={slug:"Leetcode 1697",title:"Leetcode 1697",authors:["junhechen"],tags:["leetcode","dailychallenge","notes"]},o=void 0,s={permalink:"/blog/Leetcode 1697",editUrl:"https://github.com/Junhe-Chen-9/junhe-s-documentations/blob/main/blog/2023-04-28-Leet Code.md",source:"@site/blog/2023-04-28-Leet Code.md",title:"Leetcode 1697",description:"Another same union find question , you can figure out it is a union find problem by the hint that determine a and b connected and a minimal spanning tree kind of a deal.",date:"2023-04-28T00:00:00.000Z",formattedDate:"April 28, 2023",tags:[{label:"leetcode",permalink:"/blog/tags/leetcode"},{label:"dailychallenge",permalink:"/blog/tags/dailychallenge"},{label:"notes",permalink:"/blog/tags/notes"}],readingTime:1.43,hasTruncateMarker:!1,authors:[{name:"Junhe Chen",title:"Software Developer",url:"https://bio.junhechen.com",imageURL:"https://bio.junhechen.com/assets/IMG_0001.jpeg",key:"junhechen"}],frontMatter:{slug:"Leetcode 1697",title:"Leetcode 1697",authors:["junhechen"],tags:["leetcode","dailychallenge","notes"]},nextItem:{title:"Leetcode 839",permalink:"/blog/Leetcode 839"}},l={authorsImageUrls:[void 0]},u=[],d={toc:u},c="wrapper";function p(e){let{components:n,...t}=e;return(0,r.kt)(c,(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Another same union find question , you can figure out it is a union find problem by the hint that determine a and b connected and a minimal spanning tree kind of a deal."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    int[] parent;\n    int[] size;\n    public boolean[] distanceLimitedPathsExist(int n, int[][] edgeList, int[][] queries) {\n        int queriesCount = queries.length;\n        boolean[] res = new boolean[queriesCount];\n        // init \n        parent = new int[n];\n        size = new int[n];\n        for(int i = 0; i < n; i ++){\n            parent[i] = i;\n            size[i] = 1;\n        }\n        // Store original indices with all queries.\n        int[][] queriesWithIndex = new int[queriesCount][4];\n        for (int i = 0; i < queriesCount; ++i) {\n            queriesWithIndex[i][0] = queries[i][0];\n            queriesWithIndex[i][1] = queries[i][1];\n            queriesWithIndex[i][2] = queries[i][2];\n            queriesWithIndex[i][3] = i;\n        }\n        Arrays.sort(edgeList,(a,b) ->{return a[2] - b[2];});\n        Arrays.sort(queriesWithIndex,(a,b) ->{return a[2] - b[2];});\n        int edgesIndex = 0;\n        for(int i = 0; i < queriesCount; i ++){\n            int p = queriesWithIndex[i][0];\n            int q = queriesWithIndex[i][1];\n            int limit = queriesWithIndex[i][2];\n            int originalIndex = queriesWithIndex[i][3];\n            // because we have the edges sorted\n            // while our paths are smaller than limit, we want to attache all the edges thta is less than limit\n            // if this made p q in a same union aka connected, we return true\n            while(edgesIndex < edgeList.length && edgeList[edgesIndex][2] < limit){\n                int node1 = edgeList[edgesIndex][0];\n                int node2 = edgeList[edgesIndex][1];\n                union(node1,node2);\n                edgesIndex += 1;\n            }\n            res[originalIndex] = find(p) == find(q);\n        }\n        return res;\n        \n    }\n    private int find(int a){\n        if(parent[a] == a) return a;\n        return parent[a] = find(parent[a]);\n    }\n    private int union(int a, int b){\n        int pa = find(a);\n        int pb = find(b);\n        if(pa == pb) return 0;\n        if(size[pa] > pb){\n            parent[pb] = a;\n            size[pa] += size[pb];\n        }else{\n            parent[pa] = b;\n            size[pb] += size[pa];\n        }\n        return 1;\n    }\n}\n")))}p.isMDXComponent=!0}}]);