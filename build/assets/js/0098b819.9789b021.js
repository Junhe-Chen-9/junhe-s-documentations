"use strict";(self.webpackChunkjunhe_s_documents=self.webpackChunkjunhe_s_documents||[]).push([[2709],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),h=o,m=p["".concat(l,".").concat(h)]||p[h]||d[h]||a;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},9443:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={slug:"Leetcode 2101",title:"Leetcode 2101",authors:["junhechen"],tags:["leetcode","weeklychallenge","notes"]},i=void 0,s={permalink:"/blog/Leetcode 2101",editUrl:"https://github.com/Junhe-Chen-9/junhe-s-documentations/blob/main/blog/2023-06-01-LeetCode.md",source:"@site/blog/2023-06-01-LeetCode.md",title:"Leetcode 2101",description:"the algorithm of this question is not hard, simple bfs or dfs is sufficent, but the appoarch to link bombs together based on their radius takes a edge to come up with.",date:"2023-06-01T00:00:00.000Z",formattedDate:"June 1, 2023",tags:[{label:"leetcode",permalink:"/blog/tags/leetcode"},{label:"weeklychallenge",permalink:"/blog/tags/weeklychallenge"},{label:"notes",permalink:"/blog/tags/notes"}],readingTime:1.15,hasTruncateMarker:!1,authors:[{name:"Junhe Chen",title:"Software Developer",url:"https://bio.junhechen.com",imageURL:"https://bio.junhechen.com/assets/IMG_1960.jpg",key:"junhechen"}],frontMatter:{slug:"Leetcode 2101",title:"Leetcode 2101",authors:["junhechen"],tags:["leetcode","weeklychallenge","notes"]},prevItem:{title:"Leetcode 1376",permalink:"/blog/Leetcode 1376"},nextItem:{title:"Leetcode 1396",permalink:"/blog/Leetcode 1396"}},l={authorsImageUrls:[void 0]},c=[],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"the algorithm of this question is not hard, simple bfs or dfs is sufficent, but the appoarch to link bombs together based on their radius takes a edge to come up with."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public int maximumDetonation(int[][] bombs) {\n        // we can treat as a graph\n        Map<Integer,List<Integer>> graph = new HashMap<>();\n        int n = bombs.length;\n\n        // building the graph\n        for(int i = 0; i < n; i ++){\n            for(int j = 0; j < n; j ++){\n                // we need to make sure we have different bomb \n                if(i != j){\n                    int xi = bombs[i][0], yi = bombs[i][1], ri = bombs[i][2];\n                    int xj = bombs[j][0], yj = bombs[j][1];\n\n                    // if xi can trigger xj we create that edge\n                    if((long) ri * ri >= (long)(xi - xj) * (xi - xj) + (long)(yi - yj) * (yi - yj)){\n                        graph.putIfAbsent(i,new ArrayList<>());\n                        graph.get(i).add(j);\n                    }\n                }\n            }\n        }\n\n        // now we can do dfs or bfs \n        int res = 0;\n        for(int i = 0; i < n; i ++){\n            int count = bfs(i, new HashSet<>(),graph);\n            res = Math.max(res,count);\n        }\n        return res;\n    }\n    private int bfs(int start, Set<Integer> visited, Map<Integer,List<Integer>> graph){\n        Queue<Integer> q = new LinkedList<>();\n        visited.add(start);\n        q.add(start);\n        int res = 0;\n        while(!q.isEmpty()){\n            res ++;\n            int curr = q.poll();\n            if(graph.containsKey(curr)){\n                for(int next : graph.get(curr)){\n                    if(!visited.contains(next)){\n                        // this is a new valid bomb\n                        q.add(next);\n                        visited.add(next);\n                    }\n                }\n            }\n\n            \n        }\n        return res;\n    }\n}\n")))}d.isMDXComponent=!0}}]);