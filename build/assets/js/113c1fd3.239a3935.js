"use strict";(self.webpackChunkjunhe_s_documents=self.webpackChunkjunhe_s_documents||[]).push([[9840],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=o.createContext({}),c=function(e){var t=o.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(i.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),d=r,f=p["".concat(i,".").concat(d)]||p[d]||h[d]||a;return n?o.createElement(f,l(l({ref:t},u),{},{components:n})):o.createElement(f,l({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[p]="string"==typeof e?e:r,l[1]=s;for(var c=2;c<a;c++)l[c]=n[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3664:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var o=n(7462),r=(n(7294),n(3905));const a={slug:"Leetcode 1721",title:"Leetcode 1721",authors:["junhechen"],tags:["leetcode","weeklychallenge","notes"]},l=void 0,s={permalink:"/blog/Leetcode 1721",editUrl:"https://github.com/Junhe-Chen-9/junhe-s-documentations/blob/main/blog/2023-05-14-Leet Code.md",source:"@site/blog/2023-05-14-Leet Code.md",title:"Leetcode 1721",description:"this is a two pointer question, it uses slow fast pointer technique to get pointer to the kth node from the end, then find the front node.",date:"2023-05-14T00:00:00.000Z",formattedDate:"May 14, 2023",tags:[{label:"leetcode",permalink:"/blog/tags/leetcode"},{label:"weeklychallenge",permalink:"/blog/tags/weeklychallenge"},{label:"notes",permalink:"/blog/tags/notes"}],readingTime:1.58,hasTruncateMarker:!1,authors:[{name:"Junhe Chen",title:"Software Developer",url:"https://bio.junhechen.com",imageURL:"https://bio.junhechen.com/assets/IMG_0001.jpeg",key:"junhechen"}],frontMatter:{slug:"Leetcode 1721",title:"Leetcode 1721",authors:["junhechen"],tags:["leetcode","weeklychallenge","notes"]},nextItem:{title:"Leetcode 1799",permalink:"/blog/Leetcode 1799"}},i={authorsImageUrls:[void 0]},c=[{value:"265. Paint House II",id:"265-paint-house-ii",level:3}],u={toc:c},p="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"this is a two pointer question, it uses slow fast pointer technique to get pointer to the kth node from the end, then find the front node. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public ListNode swapNodes(ListNode head, int k) {\n        // locate the end node \n        ListNode slow = head;\n        ListNode fast = head;\n        int k1 = k;\n        while(fast != null && k1 > 0){\n            fast = fast.next;\n            k1 --;\n        }\n        while(fast != null){\n            slow = slow.next;\n            fast = fast.next;\n        }\n        ListNode p = head;\n        while(p != null && k > 1){\n            p = p.next;\n            k --;\n        }\n        // make the swap \n        int temp = p.val;\n        p.val = slow.val;\n        slow.val = temp;\n        return head;\n    }\n}\n")),(0,r.kt)("h3",{id:"265-paint-house-ii"},"265. Paint House II"),(0,r.kt)("p",null,"this is a classic dp problem, but also little like advance graph apporach. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public int minCostII(int[][] costs) {\n        if(costs.length == 0) return 0; // nothing to paint\n        int k = costs[0].length; // the k color we are looking for\n        int n = costs.length;\n        int[] previousRow = costs[0];\n\n        for(int house = 1; house < n; house++){\n            // we going to look at curr costs\n            int[] currRow = new int[k];\n            for(int color = 0; color < k; color ++){\n                int min = Integer.MAX_VALUE;\n                // locate the cheapest solution from last row, we want the cheapest cost so far\n                for(int previousColor = 0; previousColor < k; previousColor ++){\n                    if(color == previousColor){\n                        // we can't print two adjusent color same\n                        continue;\n                    }\n                    min = Math.min(min, previousRow[previousColor]);\n                }\n                // if we would paint curr house curr color, then we add cost from min previous house and cost of curr house \n                currRow[color] += costs[house][color] += min;\n            }\n            // now we want to change previousRow = curr\n            previousRow = currRow;\n        }\n        // now we have the final row, find return the res\n        int res = Integer.MAX_VALUE;\n        for(int cost : previousRow){\n            res = Math.min(res,cost);\n        }\n        return res;\n    }\n}\n")))}h.isMDXComponent=!0}}]);