"use strict";(self.webpackChunkjunhe_s_documents=self.webpackChunkjunhe_s_documents||[]).push([[131],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),d=a,h=p["".concat(l,".").concat(d)]||p[d]||g[d]||o;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7799:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>g,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={slug:"Leetcode 399",title:"Leetcode 399",authors:["junhechen"],tags:["leetcode","weeklychallenge","notes"]},i=void 0,s={permalink:"/blog/Leetcode 399",editUrl:"https://github.com/Junhe-Chen-9/junhe-s-documentations/blob/main/blog/2023-05-19-Leet Code.md",source:"@site/blog/2023-05-19-Leet Code.md",title:"Leetcode 399",description:"",date:"2023-05-19T00:00:00.000Z",formattedDate:"May 19, 2023",tags:[{label:"leetcode",permalink:"/blog/tags/leetcode"},{label:"weeklychallenge",permalink:"/blog/tags/weeklychallenge"},{label:"notes",permalink:"/blog/tags/notes"}],readingTime:1.105,hasTruncateMarker:!1,authors:[{name:"Junhe Chen",title:"Software Developer",url:"https://bio.junhechen.com",imageURL:"https://bio.junhechen.com/assets/IMG_1960.jpg",key:"junhechen"}],frontMatter:{slug:"Leetcode 399",title:"Leetcode 399",authors:["junhechen"],tags:["leetcode","weeklychallenge","notes"]},prevItem:{title:"Leetcode 347",permalink:"/blog/Leetcode 347"},nextItem:{title:"Leetcode 785",permalink:"/blog/Leetcode 785"}},l={authorsImageUrls:[void 0]},c=[],u={toc:c},p="wrapper";function g(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {\n        // to solve this question\n        // we first wanna to think this as a graph and using dfs find the path from a to b\n        // in order to do so ,\n        // we must construct a weighted graph\n        HashMap<String,HashMap<String,Double>> graph = new HashMap<>();\n        \n        // we need to get equations to gain our two string node\n        // we also need to have a index to keep track \n        int index = 0;\n        for(List<String> e : equations){\n            String a = e.get(0);\n            String b = e.get(1);\n            \n            graph.putIfAbsent(a,new HashMap<>());\n            graph.putIfAbsent(b,new HashMap<>());\n            \n            \n            graph.get(a).put(b,values[index]);\n            graph.get(b).put(a,1 / values[index]);\n            index ++;\n            \n            graph.get(a).put(a,1.0);\n            graph.get(b).put(b,1.0);\n            \n        }\n        // we have sucessfully build our graph\n        // lets look at our queiries\n        double [] ans = new double[queries.size()];\n        Arrays.fill(ans,-1.0);\n        for(int i = 0; i < queries.size(); i ++){\n            List<String> q = queries.get(i);\n            String start = q.get(0);\n            String end = q.get(1);\n            \n            // check if start and end in the graph at all\n            if(!graph.containsKey(start) || !graph.containsKey(end)){\n                continue;\n            }else {\n                dfs(graph,start,end,new HashSet<String>(),1.0,ans,i);\n            \n                continue;\n            }\n        }\n        return ans;\n    }\n    // let's make our dfs method\n    private void dfs (HashMap<String,HashMap<String,Double>> graph, String start, String end, Set<String> visited, double pre, double[] ans, int index){\n        visited.add(start);\n        if(graph.get(start).containsKey(end)){\n            ans[index] = graph.get(start).get(end) * pre;\n        }\n        \n        for(String next : graph.get(start).keySet()){\n            if (visited.contains(next)) continue;\n            dfs(graph,next,end,visited,graph.get(start).get(next) * pre ,ans,index);\n        }\n    }\n}\n")))}g.isMDXComponent=!0}}]);