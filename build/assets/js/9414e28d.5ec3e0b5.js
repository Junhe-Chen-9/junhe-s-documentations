"use strict";(self.webpackChunkjunhe_s_documents=self.webpackChunkjunhe_s_documents||[]).push([[5505],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(n),g=i,d=p["".concat(c,".").concat(g)]||p[g]||h[g]||o;return n?r.createElement(d,a(a({ref:t},u),{},{components:n})):r.createElement(d,a({ref:t},u))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=g;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:i,a[1]=l;for(var s=2;s<o;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},3921:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(7462),i=(n(7294),n(3905));const o={slug:"Leetcode 1964",title:"Leetcode 1964",authors:["junhechen"],tags:["leetcode","dailychallenge","notes"]},a=void 0,l={permalink:"/blog/Leetcode 1964",editUrl:"https://github.com/Junhe-Chen-9/junhe-s-documentations/blob/main/blog/2023-05-06-Leet Code.md",source:"@site/blog/2023-05-06-Leet Code.md",title:"Leetcode 1964",description:"Difficult problem I will come back to this question later.",date:"2023-05-06T00:00:00.000Z",formattedDate:"May 6, 2023",tags:[{label:"leetcode",permalink:"/blog/tags/leetcode"},{label:"dailychallenge",permalink:"/blog/tags/dailychallenge"},{label:"notes",permalink:"/blog/tags/notes"}],readingTime:.85,hasTruncateMarker:!1,authors:[{name:"Junhe Chen",title:"Software Developer",url:"https://bio.junhechen.com",imageURL:"https://bio.junhechen.com/assets/IMG_0001.jpeg",key:"junhechen"}],frontMatter:{slug:"Leetcode 1964",title:"Leetcode 1964",authors:["junhechen"],tags:["leetcode","dailychallenge","notes"]},nextItem:{title:"Leetcode 1498",permalink:"/blog/Leetcode 1498"}},c={authorsImageUrls:[void 0]},s=[],u={toc:s},p="wrapper";function h(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Difficult problem I will come back to this question later. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    List<Integer> answer;\n    // Find the rightmost insertion position. We use a fixed-length array and a changeable right boundary \n    // to represent an arraylist of dynamic size.\n    private int bisectRight(int[] A, int target, int right) {\n        if (right == 0)\n            return 0;\n        int left = 0;\n        while (left < right) {\n            int mid = left + (right - left) / 2;\n            if (A[mid] <= target)\n                left = mid + 1;\n            else\n                right = mid;\n        }\n        return left;\n    }\n    \n    public int[] longestObstacleCourseAtEachPosition(int[] obstacles) {\n        int n = obstacles.length, lisLength = 0;\n        \n        // lis[i] records the lowest increasing sequence of length i + 1.\n        int[] answer = new int[n], lis = new int[n];\n\n        for (int i = 0; i < n; ++i) {\n            int height = obstacles[i];\n            \n            // Find the rightmost insertion position idx.\n            int idx = bisectRight(lis, height, lisLength);\n            if (idx == lisLength)\n                lisLength++;\n\n            lis[idx] = height;\n            answer[i] = idx + 1;\n        }\n        return answer;\n    }\n}\n")))}h.isMDXComponent=!0}}]);