"use strict";(self.webpackChunkjunhe_s_documents=self.webpackChunkjunhe_s_documents||[]).push([[1168],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},g="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),g=u(n),d=o,m=g["".concat(c,".").concat(d)]||g[d]||p[d]||a;return n?r.createElement(m,i(i({ref:t},s),{},{components:n})):r.createElement(m,i({ref:t},s))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[g]="string"==typeof e?e:o,i[1]=l;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3665:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var r=n(7462),o=(n(7294),n(3905));const a={slug:"Leetcode 1396",title:"Leetcode 1396",authors:["junhechen"],tags:["leetcode","weeklychallenge","notes"]},i=void 0,l={permalink:"/blog/Leetcode 1396",editUrl:"https://github.com/Junhe-Chen-9/junhe-s-documentations/blob/main/blog/2023-05-30-Leet Code.md",source:"@site/blog/2023-05-30-Leet Code.md",title:"Leetcode 1396",description:"",date:"2023-05-30T00:00:00.000Z",formattedDate:"May 30, 2023",tags:[{label:"leetcode",permalink:"/blog/tags/leetcode"},{label:"weeklychallenge",permalink:"/blog/tags/weeklychallenge"},{label:"notes",permalink:"/blog/tags/notes"}],readingTime:.915,hasTruncateMarker:!1,authors:[{name:"Junhe Chen",title:"Software Developer",url:"https://bio.junhechen.com",imageURL:"https://bio.junhechen.com/assets/IMG_0001.jpeg",key:"junhechen"}],frontMatter:{slug:"Leetcode 1396",title:"Leetcode 1396",authors:["junhechen"],tags:["leetcode","weeklychallenge","notes"]},nextItem:{title:"Leetcode 1603",permalink:"/blog/Leetcode 1603"}},c={authorsImageUrls:[void 0]},u=[],s={toc:u},g="wrapper";function p(e){let{components:t,...n}=e;return(0,o.kt)(g,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'class UndergroundSystem {\n    HashMap<Integer,Pair<String,Integer>> checkIn;\n    HashMap<String,Pair<Double,Integer>> log;\n    public UndergroundSystem() {\n        checkIn = new HashMap<>();\n        log = new HashMap<>();\n    }\n    \n    public void checkIn(int id, String stationName, int t) {\n        // check in the customer \n        checkIn.putIfAbsent(id,new Pair<>(stationName,t));\n    }\n    \n    public void checkOut(int id, String stationName, int t) {\n        Pair<String,Integer> info = checkIn.get(id);\n        String startStation = info.getKey();\n        int startTime = info.getValue();\n        String route = startStation + "->" + stationName;\n        double tripTime = t - startTime;\n\n        if(log.containsKey(route)){\n            double loggedTime = log.get(route).getKey();\n            int loggedTrip = log.get(route).getValue();\n            log.put(route,new Pair<>(tripTime + loggedTime, loggedTrip + 1));\n        }else{\n            log.put(route,new Pair<>(tripTime,1));\n        }\n        // remove the entry\n        checkIn.remove(id);\n    }\n    \n    public double getAverageTime(String startStation, String endStation) {\n        // Lookup how many times this journey has been made, and the total time.\n        String routeKey = startStation + "->" + endStation;\n        Double totalTime = log.get(routeKey).getKey();\n        int totalTrips = log.get(routeKey).getValue();\n        // The average is simply the total divided by the number of trips.\n        return totalTime / totalTrips;\n    }\n}\n\n/**\n * Your UndergroundSystem object will be instantiated and called as such:\n * UndergroundSystem obj = new UndergroundSystem();\n * obj.checkIn(id,stationName,t);\n * obj.checkOut(id,stationName,t);\n * double param_3 = obj.getAverageTime(startStation,endStation);\n */\n')))}p.isMDXComponent=!0}}]);