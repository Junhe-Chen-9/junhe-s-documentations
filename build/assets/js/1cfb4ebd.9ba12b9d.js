"use strict";(self.webpackChunkjunhe_s_documents=self.webpackChunkjunhe_s_documents||[]).push([[4741],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>b});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),d=o,b=p["".concat(s,".").concat(d)]||p[d]||m[d]||a;return n?r.createElement(b,i(i({ref:t},u),{},{components:n})):r.createElement(b,i({ref:t},u))}));function b(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9499:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={slug:"Leetcode 1416",title:"Leetcode 1416",authors:["junhechen"],tags:["leetcode","dailychallenge","notes"]},i=void 0,l={permalink:"/blog/Leetcode 1416",editUrl:"https://github.com/Junhe-Chen-9/junhe-s-documentations/blob/main/blog/2023-04-22-Leet Code.md",source:"@site/blog/2023-04-22-Leet Code.md",title:"Leetcode 1416",description:"All the dp problem is kinda similar, this is marked at hard, but in reality it is backtrack question possible sub array partition with little modification.",date:"2023-04-22T00:00:00.000Z",formattedDate:"April 22, 2023",tags:[{label:"leetcode",permalink:"/blog/tags/leetcode"},{label:"dailychallenge",permalink:"/blog/tags/dailychallenge"},{label:"notes",permalink:"/blog/tags/notes"}],readingTime:.87,hasTruncateMarker:!1,authors:[{name:"Junhe Chen",title:"Software Developer",url:"https://bio.junhechen.com",imageURL:"https://bio.junhechen.com/assets/IMG_1960.jpg",key:"junhechen"}],frontMatter:{slug:"Leetcode 1416",title:"Leetcode 1416",authors:["junhechen"],tags:["leetcode","dailychallenge","notes"]},prevItem:{title:"Code",permalink:"/blog/Code"},nextItem:{title:"Leetcode 727",permalink:"/blog/Leetcode 727"}},s={authorsImageUrls:[void 0]},c=[],u={toc:c},p="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"All the dp problem is kinda similar, this is marked at hard, but in reality it is backtrack question possible sub array partition with little modification. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    int[] memo;\n    int MOD = 1000000007;\n    public int numberOfArrays(String s, int k) {\n        memo = new int[s.length() + 1];\n        Arrays.fill(memo,-1);\n        return dp(s,k,0);\n    }\n    private int dp(String s, int k, int curr){\n        // base case \n        if(curr == s.length()) return 1; // we have no more possible number to play with\n        if(s.charAt(curr) == '0') return 0; // leading zero\n        // solved case\n        if(memo[curr] != -1) return memo[curr];\n        // start res with 0\n        int res = 0;\n        for(int i = curr; i < s.length(); i ++){\n            // try pairtition at every possible point\n            String num = s.substring(curr,i + 1);\n            // if num > k then we know we cant have this number\n            if (Long.parseLong(num) > k)\n                break;\n            // add to res if we made to the end (+ 1) res\n            res = (res + dp(s,k,i + 1)) % MOD;\n\n        }\n        return memo[curr] = res;\n    }\n}\n")))}m.isMDXComponent=!0}}]);