"use strict";(self.webpackChunkjunhe_s_documents=self.webpackChunkjunhe_s_documents||[]).push([[1757],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(t),d=a,h=p["".concat(s,".").concat(d)]||p[d]||g[d]||o;return t?r.createElement(h,i(i({ref:n},c),{},{components:t})):r.createElement(h,i({ref:n},c))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1889:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>g,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var r=t(7462),a=(t(7294),t(3905));const o={slug:"Leetcode 649",title:"Leetcode 649",authors:["junhechen"],tags:["leetcode","dailychallenge","notes"]},i=void 0,l={permalink:"/blog/Leetcode 649",editUrl:"https://github.com/Junhe-Chen-9/junhe-s-documentations/blob/main/blog/2023-05-03-Leet Code.md",source:"@site/blog/2023-05-03-Leet Code.md",title:"Leetcode 649",description:"Natively we just follow the algorithm, since banning the next senate gives up the best advantage, we do that.",date:"2023-05-03T00:00:00.000Z",formattedDate:"May 3, 2023",tags:[{label:"leetcode",permalink:"/blog/tags/leetcode"},{label:"dailychallenge",permalink:"/blog/tags/dailychallenge"},{label:"notes",permalink:"/blog/tags/notes"}],readingTime:2,hasTruncateMarker:!1,authors:[{name:"Junhe Chen",title:"Software Developer",url:"https://bio.junhechen.com",imageURL:"https://bio.junhechen.com/assets/IMG_1960.jpg",key:"junhechen"}],frontMatter:{slug:"Leetcode 649",title:"Leetcode 649",authors:["junhechen"],tags:["leetcode","dailychallenge","notes"]},prevItem:{title:"Leetcode 1456",permalink:"/blog/Leetcode 1456"},nextItem:{title:"Leetcode 2215",permalink:"/blog/Leetcode 2215"}},s={authorsImageUrls:[void 0]},u=[],c={toc:u},p="wrapper";function g(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Natively we just follow the algorithm, since banning the next senate gives up the best advantage, we do that."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public String predictPartyVictory(String senate) {\n        // baning the new opposite party be the best \n        StringBuilder senates = new StringBuilder(senate); // for easy deletion\n        // Count of Each Type of Senator to check for Winner\n        int rCount = 0;\n        int dCount = 0;\n        for (int i = 0; i < senates.length(); i++) {\n            if (senates.charAt(i) == 'R') {\n                rCount++;\n            } else {\n                dCount++;\n            }\n        }\n\n        int turn = 0;\n        while(rCount > 0 && dCount > 0){\n            // we have power still\n            if(senates.charAt(turn) == 'R'){\n                // we going to ban next D\n                boolean banning_from_before = ban(senates,'D',(turn + 1) % senates.length());\n                if(banning_from_before){\n                    turn --; //there is one opponent banned before this index, next to go is just next in turn\n                }\n                dCount --;\n            }else{\n                boolean banning_from_before = ban(senates,'R',(turn + 1) % senates.length());\n                if(banning_from_before){\n                    turn --; //there is one opponent banned before this index, next to go is just next in turn\n                }\n                rCount --;\n            }\n            turn = (turn + 1) % senates.length();\n        }\n        if(rCount == 0){\n            return \"Dire\";\n        }else{\n            return \"Radiant\";\n        }\n    }\n    private boolean ban(StringBuilder sb, Character party, int start){\n        boolean flag = false;\n        for(int i = start; i < start + sb.length(); i ++){\n            int curr = i % sb.length();\n            if(curr == 0) flag = true;\n            if(sb.charAt(curr) == party){\n                sb.deleteCharAt(curr);\n                break;\n            }\n        }\n        return flag;\n    }\n    \n}\n")),(0,a.kt)("p",null,"A better solution for this is using some datasturcture to impvore our time complecity.\nWhich structure serves first in first out? that is right a queue"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public String predictPartyVictory(String senate) {\n        // we still know the running curr senate for each party\n        int rCount = 0, dCount = 0;\n\n        // Floating Ban Count\n        int dFloatingBan = 0, rFloatingBan = 0;\n        \n        // Queue of senators\n        Queue<Character> q = new LinkedList<>();\n        for(char c : senate.toCharArray()){\n            q.add(c);\n            if(c == 'R') rCount ++;\n            else dCount ++;\n        }\n        while(rCount > 0 && dCount > 0){\n            char curr = q.poll();\n            if(curr == 'D') {\n                if(dFloatingBan > 0){\n                    // we are banning this guy\n                    dFloatingBan --;\n                    dCount --;\n                }else{\n                    rFloatingBan ++; // banning next R\n                    q.add('D'); // adds back\n                }\n            }else{\n                // same thing for ther other party\n                if(rFloatingBan > 0){\n                    rFloatingBan --;\n                    rCount --;\n                }else{\n                    dFloatingBan ++;\n                    q.add('R');\n                }\n            }\n        }\n        return rCount == 0 ? \"Dire\" : \"Radiant\";\n    }\n}\n")))}g.isMDXComponent=!0}}]);