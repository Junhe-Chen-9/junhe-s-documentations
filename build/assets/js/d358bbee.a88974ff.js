"use strict";(self.webpackChunkjunhe_s_documents=self.webpackChunkjunhe_s_documents||[]).push([[9375],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,m=c(e,["components","mdxType","originalType","parentName"]),u=s(t),d=a,f=u["".concat(l,".").concat(d)]||u[d]||p[d]||o;return t?r.createElement(f,i(i({ref:n},m),{},{components:t})):r.createElement(f,i({ref:n},m))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c[u]="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},674:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var r=t(7462),a=(t(7294),t(3905));const o={slug:"Leetcode 1799",title:"Leetcode 1799",authors:["junhechen"],tags:["leetcode","weeklychallenge","notes"]},i=void 0,c={permalink:"/blog/Leetcode 1799",editUrl:"https://github.com/Junhe-Chen-9/junhe-s-documentations/blob/main/blog/2023-05-13-Leet Code.md",source:"@site/blog/2023-05-13-Leet Code.md",title:"Leetcode 1799",description:"The dp part of the problem is not hard, but mask is difficult.",date:"2023-05-13T00:00:00.000Z",formattedDate:"May 13, 2023",tags:[{label:"leetcode",permalink:"/blog/tags/leetcode"},{label:"weeklychallenge",permalink:"/blog/tags/weeklychallenge"},{label:"notes",permalink:"/blog/tags/notes"}],readingTime:1.19,hasTruncateMarker:!1,authors:[{name:"Junhe Chen",title:"Software Developer",url:"https://bio.junhechen.com",imageURL:"https://bio.junhechen.com/assets/IMG_0001.jpeg",key:"junhechen"}],frontMatter:{slug:"Leetcode 1799",title:"Leetcode 1799",authors:["junhechen"],tags:["leetcode","weeklychallenge","notes"]},nextItem:{title:"Leetcode 2466",permalink:"/blog/Leetcode 2466"}},l={authorsImageUrls:[void 0]},s=[],m={toc:s},u="wrapper";function p(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The dp part of the problem is not hard, but mask is difficult."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    int[] memo;\n    public int maxScore(int[] nums) {\n        memo = new int[ 1 << nums.length];\n        Arrays.fill(memo,-1);\n        return dp(nums, 0, 0);\n    }\n    private int dp(int[] nums, int mask, int pairsPicked){\n        // base case \n        if(2 * pairsPicked == nums.length) return 0; // we picked all number\n        // solved case\n        if(memo[mask] != -1) return memo[mask];\n\n        int max = 0;\n        for(int i = 0; i < nums.length; i ++){\n            for(int j = i + 1; j < nums.length; j ++){\n                // If the numbers are same, or already picked, then we move to next number.\n                if (((mask >> i) & 1) == 1 || ((mask >> j) & 1) == 1) {\n                    continue;\n                }\n\n                // Both numbers are marked as picked in this new mask.\n                int newMask = mask | (1 << i) | (1 << j);\n                 // Calculate score of current pair of numbers, and the remaining array.\n                int currScore = (pairsPicked + 1) * gcd(nums[i], nums[j]);\n                int remainingScore = dp(nums, newMask, pairsPicked + 1);\n\n                // Store the maximum score.\n                max = Math.max(max, currScore + remainingScore);\n                // We will use old mask in loop's next interation, \n                // means we discarded the picked number and backtracked.\n            }\n        }\n        return memo[mask] = max;\n    }\n    private int gcd(int a, int b) {\n        if (b == 0) {\n            return a;\n        }\n        return gcd(b, a % b);\n    }\n}\n")))}p.isMDXComponent=!0}}]);