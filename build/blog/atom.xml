<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://docs.junhechen.com/blog</id>
    <title>Junhe Chen' Documentations Blog</title>
    <updated>2023-04-27T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://docs.junhechen.com/blog"/>
    <subtitle>Junhe Chen' Documentations Blog</subtitle>
    <icon>https://docs.junhechen.com/img/icon.jpeg</icon>
    <entry>
        <title type="html"><![CDATA[Leetcode 839]]></title>
        <id>https://docs.junhechen.com/blog/Leetcode 839</id>
        <link href="https://docs.junhechen.com/blog/Leetcode 839"/>
        <updated>2023-04-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This question is marked hard, but in realality this is not a difficult question. Simple union find problem, you find all the samilar strs and union them , starts with n groups after union all possible strs, what you have left is group standing.]]></summary>
        <content type="html"><![CDATA[<p>This question is marked hard, but in realality this is not a difficult question. Simple union find problem, you find all the samilar strs and union them , starts with n groups after union all possible strs, what you have left is group standing. </p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class Solution {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // union find </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    int[] parent;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    int[] size;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public int numSimilarGroups(String[] strs) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int n = strs.length;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        parent = new int[n];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        size = new int[n];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for(int i = 0; i &lt; n; i ++){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            parent[i] = i;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            size[i] = 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int count = n;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for(int i = 0; i &lt; n; i ++){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            for(int j = i + 1; j &lt; n; j ++){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                String a = strs[i];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                String b = strs[j];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                if(similar(a,b)){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    count -= union(i,j);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return count;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private int find(int a){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if(parent[a] == a) return a;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return parent[a] = find(parent[a]);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private int union(int a, int b){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int pa = find(a);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int pb = find(b);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if(pa == pb) return 0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if(size[pa] &gt; size[pb]){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // join b to a </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            parent[pb] = a;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            size[pa] += size[pb];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }else{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            parent[pa] = b;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            size[pb] += size[pa];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private boolean similar(String a, String b){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int diff = 0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for(int i = 0; i &lt; a.length(); i ++){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if(a.charAt(i) != b.charAt(i)){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                diff ++;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return diff == 2 || diff == 0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
        <author>
            <name>Junhe Chen</name>
            <uri>https://bio.junhechen.com</uri>
        </author>
        <category label="leetcode" term="leetcode"/>
        <category label="dailychallenge" term="dailychallenge"/>
        <category label="notes" term="notes"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Leetcode 319]]></title>
        <id>https://docs.junhechen.com/blog/Leetcode 319</id>
        <link href="https://docs.junhechen.com/blog/Leetcode 319"/>
        <updated>2023-04-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This is a harder question for me, write on paper and find the parttern.]]></summary>
        <content type="html"><![CDATA[<p>This is a harder question for me, write on paper and find the parttern. </p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class Solution {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public int bulbSwitch(int n) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // n == 0 all bulbs are off</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // n == 1 all bulbs with factor of 1 </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // n == 2 all bulbs with factor 2 (2,4,6,8,10)...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // n == 3 all bulbs with factor 3 (3,6,9).....</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // ......</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // so we are finding number from 1 to n are perfect square</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // essencially we are trying to find the sqrt of the n </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return (int) Math.sqrt(n);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
        <author>
            <name>Junhe Chen</name>
            <uri>https://bio.junhechen.com</uri>
        </author>
        <category label="leetcode" term="leetcode"/>
        <category label="dailychallenge" term="dailychallenge"/>
        <category label="notes" term="notes"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Leetcode 258]]></title>
        <id>https://docs.junhechen.com/blog/Leetcode 258</id>
        <link href="https://docs.junhechen.com/blog/Leetcode 258"/>
        <updated>2023-04-25T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Simple reccurssion, you have a base case where you have just 1 digit, simply return it, you have recussive case, you add all the digit and return addDigits adds all these digit recurssively]]></summary>
        <content type="html"><![CDATA[<p>Simple reccurssion, you have a base case where you have just 1 digit, simply return it, you have recussive case, you add all the digit and return addDigits adds all these digit recurssively</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class Solution {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public int addDigits(int num) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // base case</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if(num &lt; 10) return num;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int res = 0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        while(num != 0){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            res += num % 10;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            num /= 10;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return addDigits(res);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
        <author>
            <name>Junhe Chen</name>
            <uri>https://bio.junhechen.com</uri>
        </author>
        <category label="leetcode" term="leetcode"/>
        <category label="dailychallenge" term="dailychallenge"/>
        <category label="notes" term="notes"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Leetcode 2336]]></title>
        <id>https://docs.junhechen.com/blog/Leetcode 2336</id>
        <link href="https://docs.junhechen.com/blog/Leetcode 2336"/>
        <updated>2023-04-24T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Consider we have a full infinite set at first]]></summary>
        <content type="html"><![CDATA[<p>Consider we have a full infinite set at first
Use a running curr to keep track of smallest number and priority queue to keep track if we have scarlet numbers before running smallest</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class SmallestInfiniteSet {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    PriorityQueue&lt;Integer&gt; pq = new PriorityQueue&lt;&gt;();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    int curr;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public SmallestInfiniteSet() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // set curr smallest to 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        curr = 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public int popSmallest() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if(!pq.isEmpty())return pq.poll();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // if we have nothing in pq, curr smallest is what we poll out, and sus next number would be curr + 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        curr ++;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return curr - 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void addBack(int num) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if(num &lt; curr &amp; !pq.contains(num)){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // number is small and we dont have it in our pq </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // add back</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            pq.add(num);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * Your SmallestInfiniteSet object will be instantiated and called as such:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * SmallestInfiniteSet obj = new SmallestInfiniteSet();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * int param_1 = obj.popSmallest();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * obj.addBack(num);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> */</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
        <author>
            <name>Junhe Chen</name>
            <uri>https://bio.junhechen.com</uri>
        </author>
        <category label="leetcode" term="leetcode"/>
        <category label="dailychallenge" term="dailychallenge"/>
        <category label="notes" term="notes"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Leetcode 1046]]></title>
        <id>https://docs.junhechen.com/blog/Leetcode 1046</id>
        <link href="https://docs.junhechen.com/blog/Leetcode 1046"/>
        <updated>2023-04-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Very straightforward question, just mimc the instruction using priority queue.]]></summary>
        <content type="html"><![CDATA[<p>Very straightforward question, just mimc the instruction using priority queue.</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class Solution {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public int lastStoneWeight(int[] stones) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // very straight forward, we use priority queue to ensure we polling the largest 2 stones</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        PriorityQueue&lt;Integer&gt; pq = new PriorityQueue&lt;&gt;((a,b)-&gt;{return b - a;});</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for(int stone : stones){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            pq.add(stone);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // while we have 2 or more stones</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        while(pq.size() &gt; 1){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            int a = pq.poll();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            int b = pq.poll();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if(a != b){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                int remain = Math.abs(a - b);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                pq.add(remain);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // return nothing if we got no stone or last stone standing.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return pq.isEmpty() ? 0 : pq.poll();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
        <author>
            <name>Junhe Chen</name>
            <uri>https://bio.junhechen.com</uri>
        </author>
        <category label="leetcode" term="leetcode"/>
        <category label="dailychallenge" term="dailychallenge"/>
        <category label="notes" term="notes"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Leetcode 1416]]></title>
        <id>https://docs.junhechen.com/blog/Leetcode 1416</id>
        <link href="https://docs.junhechen.com/blog/Leetcode 1416"/>
        <updated>2023-04-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[All the dp problem is kinda similar, this is marked at hard, but in reality it is backtrack question possible sub array partition with little modification.]]></summary>
        <content type="html"><![CDATA[<p>All the dp problem is kinda similar, this is marked at hard, but in reality it is backtrack question possible sub array partition with little modification. </p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class Solution {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    int[] memo;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    int MOD = 1000000007;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public int numberOfArrays(String s, int k) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        memo = new int[s.length() + 1];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Arrays.fill(memo,-1);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return dp(s,k,0);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private int dp(String s, int k, int curr){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // base case </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if(curr == s.length()) return 1; // we have no more possible number to play with</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if(s.charAt(curr) == '0') return 0; // leading zero</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // solved case</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if(memo[curr] != -1) return memo[curr];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // start res with 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int res = 0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for(int i = curr; i &lt; s.length(); i ++){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // try pairtition at every possible point</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            String num = s.substring(curr,i + 1);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // if num &gt; k then we know we cant have this number</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if (Long.parseLong(num) &gt; k)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                break;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // add to res if we made to the end (+ 1) res</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            res = (res + dp(s,k,i + 1)) % MOD;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return memo[curr] = res;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
        <author>
            <name>Junhe Chen</name>
            <uri>https://bio.junhechen.com</uri>
        </author>
        <category label="leetcode" term="leetcode"/>
        <category label="dailychallenge" term="dailychallenge"/>
        <category label="notes" term="notes"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Leetcode 727]]></title>
        <id>https://docs.junhechen.com/blog/Leetcode 727</id>
        <link href="https://docs.junhechen.com/blog/Leetcode 727"/>
        <updated>2023-04-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This question interesting because our dp is not finding the min of the length but it is finding the ending index of given starting point p1. This is a very new DP problem that I have first encountered.]]></summary>
        <content type="html"><![CDATA[<p>This question interesting because our dp is not finding the min of the length but it is finding the ending index of given starting point p1. This is a very new DP problem that I have first encountered. </p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class Solution {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Integer[][] memo;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    int min = Integer.MAX_VALUE;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    int start = -1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public String minWindow(String s1, String s2) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        memo = new Integer[s1.length()][s2.length() + 1];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        dp(s1,s2,0,0);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return start == -1 ? "" : s1.substring(start,start + min);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private int dp(String s1, String s2, int p1, int p2){ </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // we use dp method to find the ending index at given index of s1 </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if(p2 == s2.length()) return p1; // we have all the character from p2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if(p1 == s1.length()) return Integer.MAX_VALUE; // we are not able to match </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // solved case</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if(memo[p1][p2] != null) return memo[p1][p2];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // solve the case </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // starts with skip the character</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int res = dp(s1,s2,p1 + 1, p2);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if(s1.charAt(p1) == s2.charAt(p2)){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // we have a match </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            res = Math.min(res,dp(s1,s2,p1 + 1, p2 + 1));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if(p2 == 0 &amp;&amp; res &lt; Integer.MAX_VALUE){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // this is a valid starting point </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // note since we called skip first, that means we are always replacing the substring as we moving forward </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // so res - p1 &lt;= min is important here to locate the correct starting point</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if(res - p1 &lt;= min){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                min = res - p1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                start = p1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return memo[p1][p2] = res;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ```</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
        <author>
            <name>Junhe Chen</name>
            <uri>https://bio.junhechen.com</uri>
        </author>
        <category label="leetcode" term="leetcode"/>
        <category label="weeklychallenge" term="weeklychallenge"/>
        <category label="notes" term="notes"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Leetcode 1312]]></title>
        <id>https://docs.junhechen.com/blog/Leetcode 1312</id>
        <link href="https://docs.junhechen.com/blog/Leetcode 1312"/>
        <updated>2023-04-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This week we are been doing DP problems and this is one of them, it is quite easy to implement, but little tricky to find the entry point.]]></summary>
        <content type="html"><![CDATA[<p>This week we are been doing DP problems and this is one of them, it is quite easy to implement, but little tricky to find the entry point.</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class Solution {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Integer[][] memo;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public int minInsertions(String s) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // we can think this as in a different prespective </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // what is longest we have to insert to make this a palindrome?</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // that is correct we can insert s in reverse to complish that, </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // if we take out the character we already have that means everthing else would then become palindrome </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        memo = new Integer[s.length()][s.length()];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        StringBuilder sb = new StringBuilder(s);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return s.length() - lcs(s,sb.reverse().toString(),0,0);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private int lcs(String s1, String s2, int p1, int p2){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // base case </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // case if we used one of the string up </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if(p1 == s1.length()) return 0;  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if(p2 == s2.length()) return 0; </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // solved case</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if(memo[p1][p2] != null) return memo[p1][p2];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // solve the case </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if(s1.charAt(p1) == s2.charAt(p2)){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // if we have a match </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            return memo[p1][p2] =  1 + lcs(s1,s2,p1 + 1,p2 + 1);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return memo[p1][p2] = Math.max(lcs(s1,s2,p1 + 1,p2),lcs(s1,s2,p1,p2 + 1));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
        <author>
            <name>Junhe Chen</name>
            <uri>https://bio.junhechen.com</uri>
        </author>
        <category label="leetcode" term="leetcode"/>
        <category label="dailychallenge" term="dailychallenge"/>
        <category label="notes" term="notes"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Welcome]]></title>
        <id>https://docs.junhechen.com/blog/welcome</id>
        <link href="https://docs.junhechen.com/blog/welcome"/>
        <updated>2023-04-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[👋 Hi!]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="-hi">👋 Hi!<a href="#-hi" class="hash-link" aria-label="Direct link to 👋 Hi!" title="Direct link to 👋 Hi!">​</a></h2><p>I'm Junhe Chen <a href="https://bio.junhechen.com" target="_blank" rel="noopener noreferrer">(JC)</a>, a full stack software engineer. Proven talent for aligning project objectives with established and emerging computer science paradigms to achieve maximum operational impacts with minimum resource expenditures. Growth-focused leader with expertise spanning technology solutions, project management, business operations optimization, application development, team leadership, and client relationship management. Exceptional student with keen interpersonal, communications, and application development expertise.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="introduction">Introduction<a href="#introduction" class="hash-link" aria-label="Direct link to Introduction" title="Direct link to Introduction">​</a></h2><p>This blog is mainly used to :</p><ul><li>take notes for my leetcode challanges.</li><li>update learning notes from other readings.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="social-card">Social Card<a href="#social-card" class="hash-link" aria-label="Direct link to Social Card" title="Direct link to Social Card">​</a></h2><p><img loading="lazy" alt="Social Card" src="/assets/images/social-card-b429455e73f3312f23e5b335b6d503ed.png" width="425" height="206" class="img_ev3q"></p><p><strong><em>If you found information here useful, feel free to review them.</em></strong></p>]]></content>
        <author>
            <name>Junhe Chen</name>
            <uri>https://bio.junhechen.com</uri>
        </author>
        <category label="helloworld" term="helloworld"/>
    </entry>
</feed>